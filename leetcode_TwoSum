1. Two Sum
Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
Example:
Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Approach_1 for O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int i,j=0;
        vector<int> vecRet;
        for(i=0; i<nums.size(); i++){
            for(j=i+1; j<nums.size(); j++){
                if(nums[i] + nums[j] == target){
                    vecRet.push_back(i);
                    vecRet.push_back(j);
                    return vecRet;
                }
            }
            
        }
        return vecRet;
    }
};


Approach_2 for O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> mapNum;
        for(int i=0; i<nums.size(); i++){
            mapNum[nums[i]] = i;
        }
        vector<int> vecRet;
        for(int i=0; i<nums.size(); i++){
            map<int,int>::iterator iter = mapNum.find(target - nums[i]);
            if(iter != mapNum.end() && (iter->second != i)){
                vecRet.push_back(i);
                vecRet.push_back(iter->second);
                return vecRet;
            }
        }
        return vecRet;
    }
};

Approach_3 for O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int,int> mapNum;
        vector<int> vecRet;
        for(int i=0; i<nums.size(); i++){
            map<int,int>::iterator iter = mapNum.find(target - nums[i]);
            if(iter != mapNum.end() && (iter->second != i)){
                vecRet.push_back(iter->second);
                vecRet.push_back(i);
                return vecRet;
            }
            mapNum[nums[i]] = i;
        }
        return vecRet;
    }
};
