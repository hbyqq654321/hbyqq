2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Example:
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Approach_1 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    int sum = 0;
    int carry = 0;
    int val1,val2;
    struct ListNode *ll1,*ll2;
    struct ListNode* head = NULL;
    struct ListNode** lp = &head;
    for(ll1 = l1,ll2 = l2; ll1||ll2;){
        val1 = ll1?ll1->val:0;
        val2 = ll2?ll2->val:0;
        sum = val1 + val2 + carry;
        *lp = malloc(sizeof(struct ListNode));
        (*lp)->val = sum % 10;
        (*lp)->next = NULL;
        carry = sum /10;
        lp = &(*lp)->next;
        ll1 = ll1?ll1->next:NULL;
        ll2 = ll2?ll2->next:NULL;
    }
    if(carry){
        *lp = malloc(sizeof(struct ListNode));
        (*lp)->val = carry;
        (*lp)->next = NULL;
    }
    return head;
}

Approach_2
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    int carry = 0;
    int ret = 0;
    int i = 0;
    struct ListNode* nextNode = NULL;
    struct ListNode* retListNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    retListNode->val = 0;
    retListNode->next = NULL;
    struct ListNode* l1next = l1;
    struct ListNode* l2next = l2;
    
    while((l1next->next != NULL) || (l2next->next != NULL)){
        ret = 0;
        if(1 == carry){
            ret = 1;
        }
        if(ret + l1next->val + l2next->val >= 10){
            carry = 1;
            ret += l1next->val + l2next->val - 10;
        }else{
            carry = 0;
            ret += l1next->val + l2next->val;
        }
        struct ListNode* tmp_l1next = l1next->next;
        struct ListNode* tmp_l2next = l2next->next;
        l1next = tmp_l1next;
        l2next = tmp_l2next;
        if(0 == i){
            retListNode->val = ret;
            nextNode = (struct ListNode*)malloc(sizeof(struct ListNode));
            nextNode->val = 0;
            nextNode->next = NULL;
            retListNode->next = nextNode;
        }else{
            nextNode->val = ret;
            nextNode->next = (struct ListNode*)malloc(sizeof(struct ListNode));
            nextNode->next->val = 0;
            nextNode->next->next = NULL;
            tmp_l1next = nextNode->next;
            nextNode = tmp_l1next;
        }
        i++;
    }   
    if(1 == carry){
        nextNode->val = 1;
        nextNode->next = NULL;
    }
    return retListNode;
}


